rm(list = ls())
## Load packages
library(pacman)
pacman::p_load(tidyverse, rio, data.table, plyr, janitor, assertable, lubridate, furniture, zoo, viridis, classInt)
## Import
files <- data.table(paths = list.files("01_data", pattern = "txt"))
files[, c("organism", "datestamp") := tstrsplit(paths, split = "_")][, datestamp := as.integer(str_remove(datestamp, "\\.txt"))]
files <- files[, .SD[datestamp == max(datestamp)], by = .(organism)]$paths
df <- import_files(files, folder = "01_data", FUN = function(f){
d <- fread(f) %>% clean_names()
data_organism <- str_remove(f, "01_data\\/") %>% tstrsplit(., split = "_") %>% .[[1]]
d[, organism := data_organism]
return(d)
})
## Pathogen metadata
search_df <- import("01_data/fpp_search_builder.xlsx") %>% as.data.table
## Filter to only the variables we care about: drop, AD a little too messy about including country codes, PT, keyword vars for now to keep prep simple MH OT
df[, v2 := NULL]
df <- df[v1 %in% c("PMID", "DP", "TI", "AB", "AU", "TA", "PL", "LA")]
## Indexing by PMID to make grouping easier
df[v1 == "PMID", pmid_count := seq(.N), by = v1]
df[, pmid_count := na.locf(pmid_count)]
pmid_map <- unique(df[v1 == "PMID", .(PMID = v3, pmid_count)])
df <- merge(df, pmid_map, by = "pmid_count", all.x = T)
df <- df[v1 != "PMID"]
df[, pmid_count := NULL]
## THis is weird just fix it
df[, v4:= str_replace_na(v4, "")][, v3 := str_c(v3,v4)][, v4 := NULL]
## Pulling out first author and associated information, dropping rest
df[v1 %in% c("AU", "AD"), index := seq(.N), by = .(v1, PMID, organism)]
df <- df[is.na(index)|index == 1]
df[, index := NULL]
## Where languages are multiple, if english exists keep only english
#df[v1 == "LA", n_lang := .N, by = .(PMID, organism)]
df[, lang_eng := any(v3 == "eng"), by = PMID]
df[lang_eng == T & v1 == "LA", v3 := "eng"]
df[, lang_eng := NULL]
df
unique(df)
df
df
df <- unique(df)
df
## Casting out wide by citation
df <- dcast(df, PMID + organism ~ v1, value.var = "v3")
df
df[, .N, by = LA]
df[, .N, by = LA][order(LA)]
df[, .N, by = LA][order(-N)]
## 01_prep_data.R
## Run pubmed queries with package, clean and standardize metadata for analysis
rm(list = ls())
## Load packages
library(pacman)
pacman::p_load(tidyverse, rio, data.table, plyr, janitor, assertable, lubridate, furniture, zoo, viridis, classInt)
## Import
files <- data.table(paths = list.files("01_data", pattern = "txt"))
files[, c("organism", "datestamp") := tstrsplit(paths, split = "_")][, datestamp := as.integer(str_remove(datestamp, "\\.txt"))]
files <- files[, .SD[datestamp == max(datestamp)], by = .(organism)]$paths
df <- import_files(files, folder = "01_data", FUN = function(f){
d <- fread(f) %>% clean_names()
data_organism <- str_remove(f, "01_data\\/") %>% tstrsplit(., split = "_") %>% .[[1]]
d[, organism := data_organism]
return(d)
})
## Pathogen metadata
search_df <- import("01_data/fpp_search_builder.xlsx") %>% as.data.table
## Filter to only the variables we care about: drop, AD a little too messy about including country codes, PT, keyword vars for now to keep prep simple MH OT
df[, v2 := NULL]
df <- df[v1 %in% c("PMID", "DP", "TI", "AB", "AU", "TA", "PL", "LA")]
## Indexing by PMID to make grouping easier
df[v1 == "PMID", pmid_count := seq(.N), by = v1]
df[, pmid_count := na.locf(pmid_count)]
pmid_map <- unique(df[v1 == "PMID", .(PMID = v3, pmid_count)])
df <- merge(df, pmid_map, by = "pmid_count", all.x = T)
df <- df[v1 != "PMID"]
df[, pmid_count := NULL]
## THis is weird just fix it
df[, v4:= str_replace_na(v4, "")][, v3 := str_c(v3,v4)][, v4 := NULL]
## Pulling out first author and associated information, dropping rest
df[v1 %in% c("AU", "AD"), index := seq(.N), by = .(v1, PMID, organism)]
df <- df[is.na(index)|index == 1]
df[, index := NULL]
## Where languages are multiple, if english exists keep only english
#df[v1 == "LA", n_lang := .N, by = .(PMID, organism)]
df[, lang_eng := any(v3 == "eng"), by = PMID]
df[lang_eng == T & v1 == "LA", v3 := "eng"]
df[, lang_eng := NULL]
df <- unique(df)
## Casting out wide by citation
df <- dcast(df, PMID + organism ~ v1, value.var = "v3")
## turning pubdate into year
df[, DP := as.integer(str_extract(DP, "^[:digit:]{4}"))]
df
df[, unique(AU)]
df[, unique(TA)]
## 01_prep_data.R
## Run pubmed queries with package, clean and standardize metadata for analysis
rm(list = ls())
## Load packages
library(pacman)
pacman::p_load(tidyverse, rio, data.table, plyr, janitor, assertable, lubridate, furniture, zoo, viridis, classInt)
## Import
files <- data.table(paths = list.files("01_data", pattern = "txt"))
files[, c("organism", "datestamp") := tstrsplit(paths, split = "_")][, datestamp := as.integer(str_remove(datestamp, "\\.txt"))]
files <- files[, .SD[datestamp == max(datestamp)], by = .(organism)]$paths
df <- import_files(files, folder = "01_data", FUN = function(f){
d <- fread(f) %>% clean_names()
data_organism <- str_remove(f, "01_data\\/") %>% tstrsplit(., split = "_") %>% .[[1]]
d[, organism := data_organism]
return(d)
})
## Pathogen metadata
search_df <- import("01_data/fpp_search_builder.xlsx") %>% as.data.table
## Filter to only the variables we care about: drop, AD a little too messy about including country codes, PT, keyword vars for now to keep prep simple MH OT
df[, v2 := NULL]
df <- df[v1 %in% c("PMID", "DP", "TI", "AB", "AU", "AD", "TA", "PL", "LA")]
## Indexing by PMID to make grouping easier
df[v1 == "PMID", pmid_count := seq(.N), by = v1]
df[, pmid_count := na.locf(pmid_count)]
pmid_map <- unique(df[v1 == "PMID", .(PMID = v3, pmid_count)])
df <- merge(df, pmid_map, by = "pmid_count", all.x = T)
df <- df[v1 != "PMID"]
df[, pmid_count := NULL]
## THis is weird just fix it
df[, v4:= str_replace_na(v4, "")][, v3 := str_c(v3,v4)][, v4 := NULL]
## Pulling out first author and associated information, dropping rest
df[v1 %in% c("AU", "AD"), index := seq(.N), by = .(v1, PMID, organism)]
df <- df[is.na(index)|index == 1]
df[, index := NULL]
## Where languages are multiple, if english exists keep only english
#df[v1 == "LA", n_lang := .N, by = .(PMID, organism)]
df[, lang_eng := any(v3 == "eng"), by = PMID]
df[lang_eng == T & v1 == "LA", v3 := "eng"]
df[, lang_eng := NULL]
df <- unique(df)
## Casting out wide by citation
df <- dcast(df, PMID + organism ~ v1, value.var = "v3")
df
df[, unique(AD)]
df
df[!"AU" %like% "USA"]
df[!AD %like% "USA"]
df[!AD %like% "USA|India|China", ]
df[!AD %like% "USA|India|China|Brazil", ]
df[!AD %like% "USA|India|China|Brazil", unique(AD)]
## 01_prep_data.R
## Run pubmed queries with package, clean and standardize metadata for analysis
rm(list = ls())
## Load packages
library(pacman)
pacman::p_load(tidyverse, rio, data.table, plyr, janitor, assertable, lubridate, furniture, zoo, viridis, classInt)
## Import
files <- data.table(paths = list.files("01_data", pattern = "txt"))
files[, c("organism", "datestamp") := tstrsplit(paths, split = "_")][, datestamp := as.integer(str_remove(datestamp, "\\.txt"))]
files <- files[, .SD[datestamp == max(datestamp)], by = .(organism)]$paths
df <- import_files(files, folder = "01_data", FUN = function(f){
d <- fread(f) %>% clean_names()
data_organism <- str_remove(f, "01_data\\/") %>% tstrsplit(., split = "_") %>% .[[1]]
d[, organism := data_organism]
return(d)
})
## Pathogen metadata
search_df <- import("01_data/fpp_search_builder.xlsx") %>% as.data.table
## Filter to only the variables we care about: drop, AD a little too messy about including country codes, PT, keyword vars for now to keep prep simple MH OT
df[, v2 := NULL]
df <- df[v1 %in% c("PMID", "DP", "TI", "AB", "AU", "TA", "PL", "LA")]
## Indexing by PMID to make grouping easier
df[v1 == "PMID", pmid_count := seq(.N), by = v1]
df[, pmid_count := na.locf(pmid_count)]
pmid_map <- unique(df[v1 == "PMID", .(PMID = v3, pmid_count)])
df <- merge(df, pmid_map, by = "pmid_count", all.x = T)
df <- df[v1 != "PMID"]
df[, pmid_count := NULL]
## THis is weird just fix it
df[, v4:= str_replace_na(v4, "")][, v3 := str_c(v3,v4)][, v4 := NULL]
## Pulling out first author and associated information, dropping rest
df[v1 %in% c("AU", "AD"), index := seq(.N), by = .(v1, PMID, organism)]
df <- df[is.na(index)|index == 1]
df[, index := NULL]
## Where languages are multiple, if english exists keep only english
#df[v1 == "LA", n_lang := .N, by = .(PMID, organism)]
df[, lang_eng := any(v3 == "eng"), by = PMID]
df[lang_eng == T & v1 == "LA", v3 := "eng"]
df[, lang_eng := NULL]
df <- unique(df)
## Casting out wide by citation
df <- dcast(df, PMID + organism ~ v1, value.var = "v3")
df
## 01_prep_data.R
## Run pubmed queries with package, clean and standardize metadata for analysis
rm(list = ls())
## Load packages
library(pacman)
pacman::p_load(tidyverse, rio, data.table, plyr, janitor, assertable, lubridate, furniture, zoo, viridis, classInt)
## Import
files <- data.table(paths = list.files("01_data", pattern = "txt"))
files[, c("organism", "datestamp") := tstrsplit(paths, split = "_")][, datestamp := as.integer(str_remove(datestamp, "\\.txt"))]
files <- files[, .SD[datestamp == max(datestamp)], by = .(organism)]$paths
df <- import_files(files, folder = "01_data", FUN = function(f){
d <- fread(f) %>% clean_names()
data_organism <- str_remove(f, "01_data\\/") %>% tstrsplit(., split = "_") %>% .[[1]]
d[, organism := data_organism]
return(d)
})
## Pathogen metadata
search_df <- import("01_data/fpp_search_builder.xlsx") %>% as.data.table
## Filter to only the variables we care about: drop, AD a little too messy about including country codes, PT, keyword vars for now to keep prep simple MH OT
df[, v2 := NULL]
df <- df[v1 %in% c("PMID", "DP", "TI", "AB", "AU", "TA", "PL", "LA")]
## Indexing by PMID to make grouping easier
df[v1 == "PMID", pmid_count := seq(.N), by = v1]
df[, pmid_count := na.locf(pmid_count)]
pmid_map <- unique(df[v1 == "PMID", .(PMID = v3, pmid_count)])
df <- merge(df, pmid_map, by = "pmid_count", all.x = T)
df <- df[v1 != "PMID"]
df[, pmid_count := NULL]
## THis is weird just fix it
df[, v4:= str_replace_na(v4, "")][, v3 := str_c(v3,v4)][, v4 := NULL]
## Pulling out first author and associated information, dropping rest
df[v1 %in% c("AU", "AD"), index := seq(.N), by = .(v1, PMID, organism)]
df <- df[is.na(index)|index == 1]
df[, index := NULL]
## Where languages are multiple, if english exists keep only english
#df[v1 == "LA", n_lang := .N, by = .(PMID, organism)]
df[, lang_eng := any(v3 == "eng"), by = PMID]
df[lang_eng == T & v1 == "LA", v3 := "eng"]
df[, lang_eng := NULL]
df <- unique(df)
## Casting out wide by citation
df <- dcast(df, PMID + organism ~ v1, value.var = "v3")
## turning pubdate into year
df[, DP := as.integer(str_extract(DP, "^[:digit:]{4}"))]
## Extract country from first author affiliation: later
## Clean up column names
setnames(df, c("DP", "TI", "AB", "AU", "TA", "PL"), c("pub_year", "title", "abstract", "first_author", "journal", "pub_location"))
df <- clean_names(df)
## Binning years
df[, pub_year_window_5 := round_any(pub_year, 5, floor)]
## Merging on fpp groups
df <- merge(df, search_df[, .(organism = fpp, priority)], by = "organism", all.x = T)
df
## 01_prep_data.R
## Run pubmed queries with package, clean and standardize metadata for analysis
rm(list = ls())
## Load packages
library(pacman)
pacman::p_load(tidyverse, rio, data.table, plyr, janitor, assertable, lubridate, furniture, zoo, viridis, classInt)
## Import
files <- data.table(paths = list.files("01_data", pattern = "txt"))
files[, c("organism", "datestamp") := tstrsplit(paths, split = "_")][, datestamp := as.integer(str_remove(datestamp, "\\.txt"))]
files <- files[, .SD[datestamp == max(datestamp)], by = .(organism)]$paths
df <- import_files(files, folder = "01_data", FUN = function(f){
d <- fread(f) %>% clean_names()
data_organism <- str_remove(f, "01_data\\/") %>% tstrsplit(., split = "_") %>% .[[1]]
d[, organism := data_organism]
return(d)
})
## Pathogen metadata
search_df <- import("01_data/fpp_search_builder.xlsx") %>% as.data.table
## Filter to only the variables we care about: drop, AD a little too messy about including country codes, PT, keyword vars for now to keep prep simple MH OT
df[, v2 := NULL]
df <- df[v1 %in% c("PMID", "DP", "TI", "AB", "AU", "TA", "PL", "LA")]
## Indexing by PMID to make grouping easier
df[v1 == "PMID", pmid_count := seq(.N), by = v1]
df[, pmid_count := na.locf(pmid_count)]
pmid_map <- unique(df[v1 == "PMID", .(PMID = v3, pmid_count)])
df <- merge(df, pmid_map, by = "pmid_count", all.x = T)
df <- df[v1 != "PMID"]
df[, pmid_count := NULL]
## THis is weird just fix it
df[, v4:= str_replace_na(v4, "")][, v3 := str_c(v3,v4)][, v4 := NULL]
## Pulling out first author and associated information, dropping rest
df[v1 %in% c("AU", "AD"), index := seq(.N), by = .(v1, PMID, organism)]
df <- df[is.na(index)|index == 1]
df[, index := NULL]
## Where languages are multiple, if english exists keep only english
#df[v1 == "LA", n_lang := .N, by = .(PMID, organism)]
df[, lang_eng := any(v3 == "eng"), by = PMID]
df[lang_eng == T & v1 == "LA", v3 := "eng"]
df[, lang_eng := NULL]
df <- unique(df)
## Casting out wide by citation
df <- dcast(df, PMID + organism ~ v1, value.var = "v3")
## turning pubdate into year
df[, DP := as.integer(str_extract(DP, "^[:digit:]{4}"))]
## Extract country from first author affiliation: later
## Clean up column names
setnames(df, c("DP", "TI", "AB", "AU", "TA", "PL", "LA"), c("pub_year", "title", "abstract", "first_author", "journal", "pub_location", "pub_lang"))
df <- clean_names(df)
## Binning years
df[, pub_year_window_5 := round_any(pub_year, 5, floor)]
## Merging on fpp groups
df <- merge(df, search_df[, .(organism = fpp, priority)], by = "organism", all.x = T)
mlang_df <- df[, .N, by = .(organism, pub_lang)][, .SD[N == max(N)], by = organism]
mlang_df
mlang_df <- df[, .N, by = .(organism, pub_lang)][, .SD[N == 2], by = organism]
mlang_df
mlang_df <- df[, .N, by = .(organism, pub_lang)][, .SD[N == 2], by = organism]
mlang_df <- mlang_df[, .(pub_lang = paste(pub_lang, collapse = ", ")), by = .(organism)]
mlang_df
n_df <- df[, .N, by = .(organism, priority)]
n22_df <- df[pub_year == 2022, .N, by = organism] %>% setnames(., "N", "N (2022)")
mcountry_df <- df[, .N, by = .(organism, pub_location)][, .SD[N == max(N)], by = organism][, N := NULL]
mlang_df <- df[, .N, by = .(organism, pub_lang)][, .SD[N == 2], by = organism]
mlang_df <- mlang_df[, .(pub_lang = paste(pub_lang, collapse = ", ")), by = .(organism)]
mjournal_df <- df[, .N, by = .(organism, journal)][, .SD[N == max(N)], by = organism]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism)]
t1 <- list(n_df, n22_df, mjournal_df, mlang_df) %>% reduce(., function(x, y) merge(x, y, by = "organism"))
t1 <- t1[order(-priority, -organism)]
write.csv(t1, "03_outputs/t1.csv", row.names = F)
t1
dd_df <- df[, .N, by = .(organism, priority, pub_year_window_5)]
jbreaks <- classIntervals(dd_df$N, style = "quantile", n = 10)
dd_df[, N_discrete := cut(N, breaks = c(jbreaks$brks), include.lowest = T)]
dd_df <- dd_df[order(-priority, -organism)]
dd_df[, organism := factor(organism, levels = unique(dd_df$organism))]
hm <- ggplot(data = dd_df[pub_year_window_5 >= 1990], aes(x = pub_year_window_5, y = organism)) + geom_tile(aes(fill = N_discrete), color = "black") + scale_fill_brewer(palette = "RdYlGn") + theme_minimal() + labs(fill = "Unique citations")
dd_df
hm
dd_df <- df[, .N, by = .(organism, priority, pub_year_window_5)]
jbreaks <- classIntervals(dd_df$N, style = "jenks", n = 10)
dd_df[, N_discrete := cut(N, breaks = c(jbreaks$brks), include.lowest = T)]
dd_df <- dd_df[order(-priority, -organism)]
dd_df[, organism := factor(organism, levels = unique(dd_df$organism))]
hm <- ggplot(data = dd_df[pub_year_window_5 >= 1990], aes(x = pub_year_window_5, y = organism)) + geom_tile(aes(fill = N_discrete), color = "black") + scale_fill_brewer(palette = "RdYlGn") + theme_minimal() + labs(fill = "Unique citations")
hm
dd_df <- df[, .N, by = .(organism, priority, pub_year_window_5)]
jbreaks <- classIntervals(dd_df$N, style = "jenks", n = 7)
dd_df[, N_discrete := cut(N, breaks = c(jbreaks$brks), include.lowest = T)]
dd_df <- dd_df[order(-priority, -organism)]
dd_df[, organism := factor(organism, levels = unique(dd_df$organism))]
hm <- ggplot(data = dd_df[pub_year_window_5 >= 1990], aes(x = pub_year_window_5, y = organism)) + geom_tile(aes(fill = N_discrete), color = "black") + scale_fill_brewer(palette = "RdYlGn") + theme_minimal() + labs(fill = "Unique citations")
hm
dd_df <- df[, .N, by = .(organism, priority, pub_year_window_5)]
jbreaks <- classIntervals(dd_df$N, style = "quantile", n = 7)
dd_df[, N_discrete := cut(N, breaks = c(jbreaks$brks), include.lowest = T)]
dd_df <- dd_df[order(-priority, -organism)]
dd_df[, organism := factor(organism, levels = unique(dd_df$organism))]
hm <- ggplot(data = dd_df[pub_year_window_5 >= 1990], aes(x = pub_year_window_5, y = organism)) + geom_tile(aes(fill = N_discrete), color = "black") + scale_fill_brewer(palette = "RdYlGn") + theme_minimal() + labs(fill = "Unique citations")
hm
dd_df <- df[, .N, by = .(organism, priority, pub_year_window_5)]
jbreaks <- classIntervals(dd_df$N, style = "quantile", n = 10)
dd_df[, N_discrete := cut(N, breaks = c(jbreaks$brks), include.lowest = T)]
dd_df <- dd_df[order(-priority, -organism)]
dd_df[, organism := factor(organism, levels = unique(dd_df$organism))]
hm <- ggplot(data = dd_df[pub_year_window_5 >= 1990], aes(x = pub_year_window_5, y = organism)) + geom_tile(aes(fill = N_discrete), color = "black") + scale_fill_brewer(palette = "RdYlGn") + theme_minimal() + labs(fill = "Unique citations")
hm
hm <- ggplot(data = dd_df[pub_year_window_5 >= 1990], aes(x = pub_year_window_5, y = organism)) +
geom_tile(aes(fill = N_discrete), color = "black") +
scale_fill_brewer(palette = "RdYlGn", labels = c("Less Data", rep("", 8), "More Data")) + theme_minimal() + labs(fill = "Unique citations")
hm
hm <- ggplot(data = dd_df[pub_year_window_5 >= 1990], aes(x = pub_year_window_5, y = organism)) +
geom_tile(aes(fill = N_discrete), color = "black") +
scale_fill_brewer(palette = "RdYlGn", labels = c("Less Data", rep("", 8), "More Data")) + theme_minimal() + labs(fill = "Unique citations") + theme(legend.position = "top")
hm
hm
hm <- ggplot(data = dd_df[pub_year_window_5 >= 1990], aes(x = pub_year_window_5, y = organism)) +
geom_tile(aes(fill = N_discrete), color = "black") +
scale_fill_brewer(palette = "RdYlGn", labels = c("Fewer", rep("", 8), "More")) + theme_minimal() + labs(fill = "Unique citations")
hm
## Top journal heatmap
j_df <- df[, .N, by = .(journal, organism)]
j_df
mlang_df <- df[, .N, by = .(organism, pub_lang)][order(-N)][, .SD[2,], by = organism]
mlang_df
mlang_df <- df[, .N, by = .(organism, pub_lang)][order(-N)][, .SD[N != max(N)], by = organism][, .SD[N == max(N)], by = organism]
mlang_df
mjournal_df <- df[, .N, by = .(organism, journal)][order(-N)]
mjournal_df
mjournal[, journal := sprintf("(%d) %s", seq(.N), journal), by = organism]
mjournal_df <- df[, .N, by = .(organism, journal)][order(-N)]
mjournal_df[, journal := sprintf("(%d) %s", seq(.N), journal), by = organism]
mjournal_df
mjournal_df <- df[, .N, by = .(organism, journal)][order(-N)]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism, N)]
mjournal_df
mjournal_df[, journal := sprintf("(%d) %s", seq(.N), journal), by = organism]
mjournal_df
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism)]
mjournal_df
mjournal_df[, unique(journal)]
mjournal_df <- df[, .N, by = .(organism, journal)][order(-N)]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism, N)]
mjournal_df[, rank := seq(.N), by = organism]
mjournal_df[rank <= 3]
mjournal_df <- df[, .N, by = .(organism, journal)][order(-N)]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism, N)]
mjournal_df[, rank := seq(.N), by = organism]
mjournal_df <- mjournal_df[rank <= 3]
mjournal_df[, journal := sprintf("(%d) %s", rank, journal), by = organism]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism)]
mjournal_df
## 01_prep_data.R
## Run pubmed queries with package, clean and standardize metadata for analysis
rm(list = ls())
## Load packages
library(pacman)
pacman::p_load(tidyverse, rio, data.table, plyr, janitor, assertable, lubridate, furniture, zoo, viridis, classInt)
## Import
files <- data.table(paths = list.files("01_data", pattern = "txt"))
files[, c("organism", "datestamp") := tstrsplit(paths, split = "_")][, datestamp := as.integer(str_remove(datestamp, "\\.txt"))]
files <- files[, .SD[datestamp == max(datestamp)], by = .(organism)]$paths
df <- import_files(files, folder = "01_data", FUN = function(f){
d <- fread(f) %>% clean_names()
data_organism <- str_remove(f, "01_data\\/") %>% tstrsplit(., split = "_") %>% .[[1]]
d[, organism := data_organism]
return(d)
})
## Pathogen metadata
search_df <- import("01_data/fpp_search_builder.xlsx") %>% as.data.table
## Filter to only the variables we care about: drop, AD a little too messy about including country codes, PT, keyword vars for now to keep prep simple MH OT
df[, v2 := NULL]
df <- df[v1 %in% c("PMID", "DP", "TI", "AB", "AU", "TA", "PL", "LA")]
## Indexing by PMID to make grouping easier
df[v1 == "PMID", pmid_count := seq(.N), by = v1]
df[, pmid_count := na.locf(pmid_count)]
pmid_map <- unique(df[v1 == "PMID", .(PMID = v3, pmid_count)])
df <- merge(df, pmid_map, by = "pmid_count", all.x = T)
df <- df[v1 != "PMID"]
df[, pmid_count := NULL]
## THis is weird just fix it
df[, v4:= str_replace_na(v4, "")][, v3 := str_c(v3,v4)][, v4 := NULL]
## Pulling out first author and associated information, dropping rest
df[v1 %in% c("AU", "AD"), index := seq(.N), by = .(v1, PMID, organism)]
df <- df[is.na(index)|index == 1]
df[, index := NULL]
## Where languages are multiple, if english exists keep only english
#df[v1 == "LA", n_lang := .N, by = .(PMID, organism)]
df[, lang_eng := any(v3 == "eng"), by = PMID]
df[lang_eng == T & v1 == "LA", v3 := "eng"]
df[, lang_eng := NULL]
df <- unique(df)
## Casting out wide by citation
df <- dcast(df, PMID + organism ~ v1, value.var = "v3")
## turning pubdate into year
df[, DP := as.integer(str_extract(DP, "^[:digit:]{4}"))]
## Extract country from first author affiliation: later
## Clean up column names
setnames(df, c("DP", "TI", "AB", "AU", "TA", "PL", "LA"), c("pub_year", "title", "abstract", "first_author", "journal", "pub_location", "pub_lang"))
df <- clean_names(df)
## Binning years
df[, pub_year_window_5 := round_any(pub_year, 5, floor)]
## Merging on fpp groups
df <- merge(df, search_df[, .(organism = fpp, priority)], by = "organism", all.x = T)
## Unit of analysis is organism-pmid (only one where this seems sketchy is scedosporium spp vs l prolificans)
## Exploratory data analysis
## Wishlist
## Tables
## Priority -> Organism
## Number of citations, citations in 2022, most frequent journal, most frequent non-english lang
n_df <- df[, .N, by = .(organism, priority)]
n22_df <- df[pub_year == 2022, .N, by = organism] %>% setnames(., "N", "N (2022)")
mcountry_df <- df[, .N, by = .(organism, pub_location)][, .SD[N == max(N)], by = organism][, N := NULL]
mlang_df <- df[, .N, by = .(organism, pub_lang)][order(-N)][, .SD[N != max(N)], by = organism][, .SD[N == max(N)], by = organism]
mlang_df <- mlang_df[, .(pub_lang = paste(pub_lang, collapse = ", ")), by = .(organism)]
mjournal_df <- df[, .N, by = .(organism, journal)][order(-N)]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism, N)]
mjournal_df[, rank := seq(.N), by = organism]
mjournal_df <- mjournal_df[rank <= 3]
mjournal_df[, journal := sprintf("(%d) %s", rank, journal), by = organism]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism)]
mjournal_df[, rank := NULL]
t1 <- list(n_df, n22_df, mjournal_df, mlang_df) %>% reduce(., function(x, y) merge(x, y, by = "organism"))
t1 <- t1[order(-priority, -organism)]
write.csv(t1, "03_outputs/t1.csv", row.names = F)
njournal_df <- unique(df[, .(organism, journal)])[, .N, by = organism]
njournal_df
nlang_df <- unique(df[, .(organism, pub_lang)])[, .N, by = organism]
nlang_df
n_df <- df[, .N, by = .(organism, priority)]
n22_df <- df[pub_year == 2022, .N, by = organism] %>% setnames(., "N", "N (2022)")
njournal_df <- unique(df[, .(organism, journal)])[, .N, by = organism] %>% setnames(., "N", "Unique Journals")
nlang_df <- unique(df[, .(organism, pub_lang)])[, .N, by = organism] %>% setnames(., "N", "Unique Languages")
mjournal_df <- df[, .N, by = .(organism, journal)][order(-N)]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism, N)]
mjournal_df[, rank := seq(.N), by = organism]
mjournal_df <- mjournal_df[rank <= 3]
mjournal_df[, journal := sprintf("(%d) %s", rank, journal), by = organism]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism)]  %>% setnames(., "journal", "Top Journals")
mjournal_df
mlang_df <- df[, .N, by = .(organism, pub_lang)][order(-N)][, .SD[N != max(N)], by = organism][, .SD[N == max(N)], by = organism]
mlang_df <- mlang_df[, .(pub_lang = paste(pub_lang, collapse = ", ")), by = .(organism)]  %>% setnames(., "pub_lang", "Top non-English")
mlang_df
n_df <- df[, .N, by = .(organism, priority)]
n22_df <- df[pub_year == 2022, .N, by = organism] %>% setnames(., "N", "N (2022)")
njournal_df <- unique(df[, .(organism, journal)])[, .N, by = organism] %>% setnames(., "N", "Unique Journals")
nlang_df <- unique(df[, .(organism, pub_lang)])[, .N, by = organism] %>% setnames(., "N", "Unique Languages")
mlang_df <- df[, .N, by = .(organism, pub_lang)][order(-N)][, .SD[N != max(N)], by = organism][, .SD[N == max(N)], by = organism]
mlang_df <- mlang_df[, .(pub_lang = paste(pub_lang, collapse = ", ")), by = .(organism)]  %>% setnames(., "pub_lang", "Top non-English")
mjournal_df <- df[, .N, by = .(organism, journal)][order(-N)]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism, N)]
mjournal_df[, rank := seq(.N), by = organism]
mjournal_df <- mjournal_df[rank <= 3]
mjournal_df[, journal := sprintf("(%d) %s", rank, journal), by = organism]
mjournal_df <- mjournal_df[, .(journal = paste(journal, collapse = ", ")), by = .(organism)]  %>% setnames(., "journal", "Top Journals")
t1 <- list(n_df, n22_df, njournal_df, mjournal_df, nlang_df, mlang_df) %>% reduce(., function(x, y) merge(x, y, by = "organism"))
t1 <- t1[order(-priority, -organism)]
write.csv(t1, "03_outputs/t1.csv", row.names = F)
t1
View(t1)
source("~/projects/02_gbd_fungal/citation_analysis/02_code/01_prep_data.R", echo=TRUE)
source("~/projects/02_gbd_fungal/citation_analysis/02_code/01_prep_data.R", echo=TRUE)
source("~/projects/02_gbd_fungal/citation_analysis/02_code/01_prep_data.R", echo=TRUE)
source("~/projects/02_gbd_fungal/citation_analysis/02_code/01_prep_data.R", echo=TRUE)
source("~/projects/02_gbd_fungal/citation_analysis/02_code/01_prep_data.R", echo=TRUE)
unique(df$journal)
unique(df$journal) %>% length()
unique(df$language)
length(unique(df$pub_lang))
nrow(unique(df[, .(organism, pmid)]))
unique(df[, .(pmid, pub_lang)])[, .N, by = pub_lang][order(-N)]
